---
title: "HW8"
format: html
editor: visual
---
```{r}
library(tidyr)
library(dplyr)
library(readr)
library(lubridate)
library(psych)
library(tidymodels)


data<-readr::read_csv("SeoulBikeData.csv",locale=locale(encoding="latin1"))
```


```{r}
sum_na<-function(column){
  sum(is.na(column))
}

na_counts<-data|>
  summarize(across(everything(),sum_na))
print(na_counts)
```

```{r}
psych::describe(data)
```

```{r}

data$Date<- dmy(data$Date)

print(data)

data<-data|>
  mutate(Seasons=as.factor(Seasons),
         Holiday=as.factor(Holiday),
         `Functioning Day`=as.factor(`Functioning Day`))

print(data)

data<-data|>
  rename(temp=`Temperature(°C)`,hr=Hour,humidity=`Humidity(%)`,rbc=`Rented Bike Count`,ws=`Wind speed (m/s)`,vis=`Visibility (10m)`,dpttemp=`Dew point temperature(°C)`,solrad=`Solar Radiation (MJ/m2)`,rain=`Rainfall(mm)`,snow=`Snowfall (cm)`,holiday=Holiday,season=Seasons,funday=`Functioning Day`)

```

```{r}
data|>
  group_by(funday)|>
  summarise(across(where(is.numeric),
                   list("sum"=sum,"mean"=mean,"median"=median,"sd"=sd,"min"=min,"max"=max),
                   .names="{.fn}_{.col}"))
    
  
 

```
```{r}
Model_data<-data|>
  group_by(Date,season,holiday)|>
   summarize(
     sum_rbc=sum(rbc,na.rm=TRUE),
     sum_rain=sum(rain,na.rm=TRUE),
     sum_snow=sum(snow,na.rm=TRUE),
     mean_temp=mean(temp,na.rm=TRUE),
     mean_hum=mean(humidity,na.rm=TRUE),
     mean_ws=mean(ws,na.rm=TRUE),
     mean_vis=mean(vis,na.rm=TRUE),
     mean_dpttemp=mean(dpttemp,na.rm=TRUE),
     mean_solrad=mean(solrad,na.rm=TRUE),
   )
   
                   
  

```

```{r}
split<-initial_split(Model_data,strata=season,prop=0.75)
training<-training(split)
test<-testing(split)

print(training)
print(test)



```


```{r}
get_cv_splits <- function(data, num_folds){
  #get fold size
  size_fold <- floor(nrow(data)/num_folds)
  #get random indices to subset the data with
  random_indices <- sample(1:nrow(data), size = nrow(data), replace = FALSE)
  #create a list to save our folds in
  folds <- list()
  #now cycle through our random indices vector and take the appropriate observations to each fold
  for(i in 1:num_folds){
    if (i < num_folds) {
      fold_index <- seq(from = (i-1)*size_fold +1, to = i*size_fold, by = 1)
      folds[[i]] <- data[random_indices[fold_index], ]
    } else {
      fold_index <- seq(from = (i-1)*size_fold +1, to = length(random_indices), by = 1)
      folds[[i]] <- data[random_indices[fold_index], ]
    }
  }
  return(folds)
}
folds <- get_cv_splits(training, 10)

```


```{r}
rec1<-recipe(sum_rbc~.,data=training)|>
  update_role(Date,new_role = "ID")|>
  step_date(Date,features="dow")|>
  step_mutate(DOW=factor(case_when(Date_dow=="Sat"|Date_dow=="Sun"~"Weekend",
                            Date_dow=="Mon"|Date_dow=="Tue"|Date_dow=="Wed"|Date_dow=="Thu"|Date_dow=="Fri"~"Weekday")))|>
  step_rm(Date_dow)|>
  step_dummy(season,holiday,DOW)|>
  step_normalize(all_numeric(),-all_outcomes())|>
  prep(training=training)|>
  bake(training)


```

